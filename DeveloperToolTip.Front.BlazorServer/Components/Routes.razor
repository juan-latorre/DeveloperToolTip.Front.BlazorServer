@* <Router AppAssembly="typeof(Program).Assembly">
    <Found Context="routeData">
        <RouteView RouteData="routeData" DefaultLayout="typeof(Layout.MainLayout)" />
        <FocusOnNavigate RouteData="routeData" Selector="h1" />
    </Found>
</Router> *@
 @using DeveloperToolTip.Front.BlazorServer.Services
 @inject IAuthService _AuthService

 @inject Blazored.LocalStorage.ILocalStorageService LocalStorage
 @inject NavigationManager NavigationManager

<Router AppAssembly="typeof(Program).Assembly">
    <Found Context="routeData">
        @if (routeData.PageType == typeof(Login))
        {
            <RouteView RouteData="routeData" DefaultLayout="null" />
        }
        else if (isInitialized && string.IsNullOrEmpty(authToken))
        {
            // Redirige desde Routes directamente
            //NavigationManager.NavigateTo("/", true);
            <RedirectToLogin />
        }
        else
        {
            <RouteView RouteData="routeData" DefaultLayout="typeof(MainLayout)" />
        }
    </Found>
    <NotFound>
        <LayoutView Layout="typeof(MainLayout)">
            <p>Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>


@code {
    private string? authToken;
    private bool isInitialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isInitialized)
        {
            try
            {
                // Obtén el token después de la renderización
                authToken = await LocalStorage.GetItemAsync<string>("authToken");

                // Marca la inicialización completa
                isInitialized = true;

                // Si no hay token, redirige al Login
                if (string.IsNullOrEmpty(authToken) && NavigationManager.Uri != NavigationManager.BaseUri)
                {
                    NavigationManager.NavigateTo("/", true);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error accessing LocalStorage: {ex.Message}");
            }
            finally
            {
                StateHasChanged(); // Refresca la UI
            }
        }
    }

}