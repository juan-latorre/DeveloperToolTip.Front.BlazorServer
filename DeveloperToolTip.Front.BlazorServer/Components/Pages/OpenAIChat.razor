@page "/OpenAIChat"

@using DeveloperToolTip.Front.BlazorServer.Services
@using System.Text.RegularExpressions;


@inject IOpenAIService _IOpenAIService;
@inject IJSRuntime js

<div class="chat-container">
    <div class="chat-messages" @ref="ChatMessagesDiv" id="chatContainer">
        @foreach (var item in ChatHistory)
        {
            <div class="chat-message @(item.IsUser ? "user-message" : "bot-message")">
                <p>@((MarkupString)FormatResponse(item.Content))</p>
            </div>
        }
    </div>
    <div class="chat-input">
        <textarea class="form-control" placeholder="Escribe tu mensaje..." @bind="Prompt"></textarea>
        <button class="btn btn-primary" @onclick="SendRequest">Enviar</button>
    </div>
</div>

<script>
    //     function scrollToBottom(elementId) {
    //     var element = document.getElementById(elementId);
    //     if (element) {
    //         element.scrollTop = element.scrollHeight;
    //     }
    // }

        function scrollToBottom(selector) {
        var element = document.querySelector(selector);
        if (element) {
            element.scrollTop = element.scrollHeight;
        }
    }
</script>

@code {
    private string Prompt { get; set; } = string.Empty;
    private List<ChatMessage> ChatHistory { get; set; } = new();
    private ElementReference ChatMessagesDiv;

    private async Task SendRequest()
    {
        if (!string.IsNullOrWhiteSpace(Prompt))
        {
            // Agregar el mensaje del usuario al historial
            ChatHistory.Add(new ChatMessage
                {
                    IsUser = true,
                    Content = Prompt
                });

            try
            {
                // Llamar al API de OpenAI
                var response = await _IOpenAIService.SendRequestAsync(Prompt);

                // Agregar la respuesta de la IA al historial
                ChatHistory.Add(new ChatMessage
                    {
                        IsUser = false,
                        Content = response
                    });
            }
            catch (Exception ex)
            {
                ChatHistory.Add(new ChatMessage
                    {
                        IsUser = false,
                        Content = "An error occurred while processing your request!"
                    });
                Console.WriteLine($"Error: {ex.Message}");
            }

            // Limpiar el input
            Prompt = string.Empty;
        }
    }

    private async Task ScrollToBottom()
    {
        //await js.InvokeVoidAsync("scrollToBottom", ChatMessagesDiv);
        //await js.InvokeVoidAsync("scrollToBottom", new object[] { "chat-container" });
        await js.InvokeVoidAsync("scrollToBottom", "#chatContainer");

    }

    private string FormatResponse(string response)
    {
        if (string.IsNullOrEmpty(response)) return response;

        var urlPattern = @"(http|https):\/\/[^\s]+";
        var regex = new Regex(urlPattern);

        // Reemplazar URLs con etiquetas HTML `<a>`
        var formattedResponse = regex.Replace(response, match =>
            $"<a href=\"{match.Value}\" target=\"_blank\" class=\"text-decoration-none text-primary\">{match.Value}</a>");

        // Reemplazar saltos de línea con `<br>` para mantener el formato
        return formattedResponse.Replace("\n", "<br>");
    }

    private class ChatMessage
    {
        public bool IsUser { get; set; }
        public string Content { get; set; }
    }
}

