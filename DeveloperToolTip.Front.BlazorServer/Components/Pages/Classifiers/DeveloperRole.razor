@using DeveloperToolTip.Front.BlazorServer.Services
@using Radzen
@using Newtonsoft.Json;
@using System.Net.Http.Json;

@page "/classifiers/DeveloperRole"
@inject IRoleService _IRoleService
@inject Radzen.DialogService _DialogService



<div class="container mt-4">
    <h2>Developer Roles</h2>
    <RadzenDataGrid TItem="RoleDto" Data="@DtoRoles" RowSelect="@OnRowSelect" AllowPaging="true" PageSize="10" AllowSorting="true" AllowFiltering="true">
        <Columns>
            <RadzenDataGridColumn TItem="RoleDto" Property="Id" Title="ID" />
            <RadzenDataGridColumn TItem="RoleDto" Property="RoleName" Title="Role Name" />
            <RadzenDataGridColumn TItem="RoleDto" Title="Actions">
                <Template Context="role">
                    <button class="btn btn-primary btn-sm" @onclick="() => EditRole(role)">Edit</button>
                    <button class="btn btn-danger btn-sm" @onclick="() => DeleteRole(role.Id)">Delete</button>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>

    <hr />
    <div>
        <h3>@(IsEditMode ? "Edit Role" : "Create New Role")</h3>
        <EditForm Model="@SelectedRole" OnValidSubmit="@SaveRole">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-3">
                <label for="RoleName" class="form-label">Role Name</label>
                <InputText id="RoleName" class="form-control" @bind-Value="SelectedRole.RoleName" />
            </div>
            <button type="submit" class="btn btn-success">@("Save")</button>
            <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
        </EditForm>
    </div>
</div>

@code {

    private List<RoleDto> DtoRoles = new();
    private RoleDto SelectedRole = new();
    private bool IsEditMode = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadRolesAsync();
    }

    private async Task LoadRolesAsync()
    {
        var roles = await _IRoleService.GetAllRoles();
        DtoRoles = roles.ToList();
    }

    private void OnRowSelect(RoleDto role)
    {
        SelectedRole = role;
    }

    private void EditRole(RoleDto role)
    {
        SelectedRole = role;
        IsEditMode = true;
    }

    private async Task DeleteRole(int id)
    {
        var confirmed = await _DialogService.Confirm("Are you sure you want to delete this role?");
        if (confirmed == true)
        {
            var success = await _IRoleService.DeleteRole(id);
            if (success)
            {
                await LoadRolesAsync();
            }
        }
    }

    private void CancelEdit()
    {
        SelectedRole = new RoleDto();
        IsEditMode = false;
    }

    private async Task SaveRole()
    {
        var _newRole = MapToCreateRoleDto(SelectedRole);

        if (SelectedRole.Id == 0)
        {
           
            // Create new role
           
            var success = await _IRoleService.CreateRole(_newRole);
            if (success)
            {
                await LoadRolesAsync();
            }
        }
        else
        {
            // Update existing role
            var success = await _IRoleService.UpdateRole(SelectedRole);
            if (success)
            {
                await LoadRolesAsync();
            }
        }

        SelectedRole = new RoleDto();
        IsEditMode = false;
    }

    private CreateRoleDto MapToCreateRoleDto(RoleDto role)
    {
        return new CreateRoleDto
            {
                RoleName = role.RoleName
            };
    }

 
}
