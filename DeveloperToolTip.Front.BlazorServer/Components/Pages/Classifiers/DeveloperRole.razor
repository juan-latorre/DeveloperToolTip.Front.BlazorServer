@using DeveloperToolTip.Front.BlazorServer.Services
@using Radzen
@using Newtonsoft.Json;
@using System.Net.Http.Json;

@page "/classifiers/DeveloperRole"
@inject IRoleService _IRoleService
@inject DialogService _DialogService
@inject NotificationService NotificationService

<!-- DeveloperRole.razor -->

<h3>Developer Roles</h3>
<p></p>

<div class="row mb-3">
    <div class="col">
        <RadzenButton Icon="add" Text="Create Role" ButtonStyle="ButtonStyle.Primary" Click="@OpenCreateDialog" />
    </div>
</div>

@if (Roles != null && Roles.Any())
{
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Center" ShowPagingSummary="true"  Data="@Roles" TItem="RoleDto" RowSelect="@OnRowSelect" class="rz-datagrid">
        <Columns>
            <RadzenDataGridColumn TItem="RoleDto" Property="Id" Title="Role ID" />
            <RadzenDataGridColumn TItem="RoleDto" Property="RoleName" Title="Role Name" />
            <RadzenDataGridColumn TItem="RoleDto" Title="Actions" TextAlign="TextAlign.Center">
                <Template Context="role">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Warning" Click="@(() => OpenEditDialog(role))" />
                    <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Click="@(() => OpenDeleteDialog(role))" Style="margin-left: 10px;" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}
else
{
    <RadzenAlert AlertStyle="AlertStyle.Info" ShowIcon="true">
        No Roles available!
    </RadzenAlert>
}



@code {
    private IEnumerable<RoleDto> Roles { get; set; } = Enumerable.Empty<RoleDto>();
    //private RoleDto SelectedRole = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadRoles();
    }

    private async Task LoadRoles()
    {
        Roles = await _IRoleService.GetAllRoles();
        StateHasChanged();
    }

    private async Task OpenCreateDialog()
    {
        var result = await _DialogService.OpenAsync<CreateRoleDialog>("Create Role");
        if (result != null)
        {
            var newRole = new CreateRoleDto { RoleName = result.ToString() };
            //var _newRole = MapToCreateRoleDto(SelectedRole);
            var success = await _IRoleService.CreateRole(newRole);

            if (success)
            {
                NotificationService.Notify(NotificationSeverity.Success, "Success", "Role created successfully!");
                await LoadRoles();
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to create Role");
            }
        }
    }

    private async Task OpenEditDialog(RoleDto role)
    {
        var result = await _DialogService.OpenAsync<EditRoleDialog>("Edit Role", 
        new Dictionary<string, object> { { "Role", role } });

        if (result != null)
        {
            role.RoleName = result.ToString();
            var success = await _IRoleService.UpdateRole(role);

            if (success)
            {
                NotificationService.Notify(NotificationSeverity.Success, "Success", "Role updated successfully!");
                await LoadRoles();
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to update Role");
            }
        }
    }

    private async Task OpenDeleteDialog(RoleDto role)
    {
        var confirm = await _DialogService.Confirm("Are you sure you want to delete this Role?",
            $"Delete {role.RoleName}",
            new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

        if (confirm == true)
        {
            var success = await _IRoleService.DeleteRole(role.Id);

            if (success)
            {
                NotificationService.Notify(NotificationSeverity.Success, "Success", "Role deleted successfully!");
                await LoadRoles();
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to delete Role");
            }
        }
    }

    // private CreateRoleDto MapToCreateRoleDto(RoleDto role)
    // {
    //     return new CreateRoleDto
    //         {
    //             RoleName = role.RoleName
    //         };
    // }

    private void OnRowSelect(RoleDto role)
    {
       NotificationService.Notify(NotificationSeverity.Info, "Selected", $"Selected Role: {role.RoleName}");
    }
}

