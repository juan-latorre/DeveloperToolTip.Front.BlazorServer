@using DeveloperToolTip.Front.BlazorServer.Services
@using Radzen
@using Newtonsoft.Json;
@using System.Net.Http.Json;

@page "/classifiers/DeveloperRole"
@inject IRoleService _IRoleService

<h3>Manage Developer Roles</h3>

@if (Roles != null && Roles.Any())
{
    <RadzenDataGrid Data="@Roles" TItem="RoleDto" RowSelect="@OnRowSelect" class="rz-datagrid">
        <Columns>
            <RadzenDataGridColumn TItem="RoleDto" Property="Id" Title="Role ID" />
            <RadzenDataGridColumn TItem="RoleDto" Property="RoleName" Title="Role Name" />
            <RadzenDataGridColumn TItem="RoleDto" Title="Actions">
                <Template Context="roles">
                    <RadzenButton Icon="edit" Class="rz-button rz-button-sm rz-button-warning" Text="Edit" Click="@(() => EditCategory(roles.Id))" />
                    <RadzenButton Icon="delete" Class="rz-button rz-button-sm rz-button-danger" Text="Delete" Click="@(() => DeleteCategory(roles.Id))" Style="margin-left: 10px;" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}
else
{
    <p>No Categories available!</p>
}



@code {
     
    private IEnumerable<RoleDto> Roles { get; set; } = Enumerable.Empty<RoleDto>();
    
    protected override async Task OnInitializedAsync()
    {
        Roles = await _IRoleService.GetAllRoles();
    }

    private void EditCategory(int roleId)
    {
        // Implementar lógica para editar la categoría
        Console.WriteLine($"Edit Role with ID: {roleId}");
    }

    private void DeleteCategory(int roleId)
    {
        // Implementar lógica para eliminar la categoría
        Console.WriteLine($"Delete Category with ID: {roleId}");
    }

    private void OnRowSelect(RoleDto role)
    {
        // Implementar lógica al seleccionar una fila, si es necesario
        Console.WriteLine($"Selected Category: {role.RoleName}");
    }

 
}
