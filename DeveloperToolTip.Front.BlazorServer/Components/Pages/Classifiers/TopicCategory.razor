@using DeveloperToolTip.Front.BlazorServer.Services
@using DeveloperToolTip.Front.BlazorServer.Models
@using Radzen
@using Radzen.Blazor

@page "/classifiers/TopicCategory"
@inject ICategoryService _ICategoryService
@inject DialogService DialogService
@inject NotificationService NotificationService

<h3>Topic Categories</h3>
<p></p>

<div class="row mb-3">
    <div class="col">
        <RadzenButton Icon="add" Text="Add Category" ButtonStyle="ButtonStyle.Primary" Click="@OpenCreateDialog" />
    </div>
</div>

@if (Categories != null && Categories.Any())
{
    <RadzenDataGrid Data="@Categories" TItem="TopicCategoryDto" RowSelect="@OnRowSelect" class="rz-datagrid">
        <Columns>
            <RadzenDataGridColumn TItem="TopicCategoryDto" Property="Id" Title="Category ID" />
            <RadzenDataGridColumn TItem="TopicCategoryDto" Property="CategoryName" Title="Category Name" />
            <RadzenDataGridColumn TItem="TopicCategoryDto" Title="Actions" TextAlign="TextAlign.Center">
                <Template Context="category">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Warning" Click="@(() => OpenEditDialog(category))" />
                    <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Click="@(() => OpenDeleteDialog(category))" Style="margin-left: 10px;" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}
else
{
    <RadzenAlert AlertStyle="AlertStyle.Info" ShowIcon="true">
        No Categories available!
    </RadzenAlert>
}

@code {
    private IEnumerable<TopicCategoryDto> Categories { get; set; } = Enumerable.Empty<TopicCategoryDto>();

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        Categories = await _ICategoryService.GetAllCategories();
        StateHasChanged();
    }

    private async Task OpenCreateDialog()
    {
        var result = await DialogService.OpenAsync<CreateCategoryDialog>("Create Category");
        if (result != null)
        {
            var newCategory = new CreateCategoryDto { CategoryName = result.ToString() };
            var success = await _ICategoryService.CreateCategory(newCategory);

            if (success)
            {
                NotificationService.Notify(NotificationSeverity.Success, "Success", "Category created successfully!");
                await LoadCategories();
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to create category");
            }
        }
    }

    private async Task OpenEditDialog(TopicCategoryDto category)
    {
        var result = await DialogService.OpenAsync<EditCategoryDialog>("Edit Category",
            new Dictionary<string, object> { { "Category", category } });

        if (result != null)
        {
            category.CategoryName = result.ToString();
            var success = await _ICategoryService.UpdateCategory(category);

            if (success)
            {
                NotificationService.Notify(NotificationSeverity.Success, "Success", "Category updated successfully!");
                await LoadCategories();
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to update category");
            }
        }
    }

    private async Task OpenDeleteDialog(TopicCategoryDto category)
    {
        var confirm = await DialogService.Confirm("Are you sure you want to delete this category?",
            $"Delete {category.CategoryName}",
            new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

        if (confirm == true)
        {
            var success = await _ICategoryService.DeleteCategory(category.Id);

            if (success)
            {
                NotificationService.Notify(NotificationSeverity.Success, "Success", "Category deleted successfully!");
                await LoadCategories();
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to delete category");
            }
        }
    }

    private void OnRowSelect(TopicCategoryDto category)
    {
        NotificationService.Notify(NotificationSeverity.Info, "Selected", $"Selected category: {category.CategoryName}");
    }
}