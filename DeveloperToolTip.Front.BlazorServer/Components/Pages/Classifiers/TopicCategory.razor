@using DeveloperToolTip.Front.BlazorServer.Services
@using Radzen

@page "/classifiers/TopicCategory"
@inject ICategoryService _ICategoryService

<h3>Topic Categories</h3>

@if (Categories != null && Categories.Any())
{
    <RadzenDataGrid Data="@Categories" TItem="TopicCategoryDto" RowSelect="@OnRowSelect" class="rz-datagrid">
        <Columns>
            <RadzenDataGridColumn TItem="TopicCategoryDto" Property="Id" Title="Role ID" />
            <RadzenDataGridColumn TItem="TopicCategoryDto" Property="CategoryName" Title="Role Name" />
            <RadzenDataGridColumn TItem="TopicCategoryDto" Title="Actions">
                <Template Context="category">
                    <RadzenButton Icon="edit" Class="rz-button rz-button-sm rz-button-warning" Text="Edit" Click="@(() => EditCategory(category.Id))" />
                    <RadzenButton Icon="delete" Class="rz-button rz-button-sm rz-button-danger" Text="Delete" Click="@(() => DeleteCategory(category.Id))" Style="margin-left: 10px;" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}
else
{
    <p>No Categories available!</p>
}

@code {

    private IEnumerable<TopicCategoryDto> Categories { get; set; } = Enumerable.Empty<TopicCategoryDto>();

    protected override async Task OnInitializedAsync()
    {
        Categories = await _ICategoryService.GetAllCategories();
    }

    private void EditCategory(int categoryId)
    {
        // Implementar lógica para editar la categoría
        Console.WriteLine($"Edit Category with ID: {categoryId}");
    }

    private void DeleteCategory(int categoryId)
    {
        // Implementar lógica para eliminar la categoría
        Console.WriteLine($"Delete Category with ID: {categoryId}");
    }

    private void OnRowSelect(TopicCategoryDto category)
    {
        // Implementar lógica al seleccionar una fila, si es necesario
        Console.WriteLine($"Selected Category: {category.CategoryName}");
    }
}

